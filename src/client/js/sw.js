/* global caches self URL fetch */
var NOCACHELIST = [
  '/sw.js',
  '/api/',
  '/.+?/.+?/slide',
  '/.+?/.+?.json'
]

var ASSETS = [] // this data is automatically generated by gulp

var CHECKSUM = '' // this data is automatically generated by gulp
var CACHENAME = 'app-assets-' + CHECKSUM

console.log('sw: hello', CHECKSUM)

this.addEventListener('install', function (event) {
  console.log('sw: installed')
  event.waitUntil(
    self.skipWaiting()
  )
})

self.addEventListener('activate', function (event) {
  console.log('sw: activated')
  event.waitUntil(
    self.clients.claim()
  )
})

function shouldUseAppHtml (request) {
  var pathname = new URL(request.url).pathname

  var i

  for (i = 0; i < ASSETS.length; ++i) {
    var re = new RegExp('^' + ASSETS[i])
    if (re.test(pathname)) {
      return false
    }
  }

  for (i = 0; i < NOCACHELIST.length; ++i) {
    var re = new RegExp('^' + NOCACHELIST[i])
    if (re.test(pathname)) {
      return false
    }
  }

  if (request.method !== 'GET') {
    return false
  }

  var accept = request.headers.get('Accept')
  if (!accept || accept.indexOf('text/html') < 0) {
   return false
  }

  return true
}

function shouldCache (request, response) {
  for (var i = 0; i < NOCACHELIST.length; ++i) {
    var b = new RegExp(NOCACHELIST[i])
    if (b.test(request.url)) {
      return false
    }
  }

  if (request.method !== 'GET') {
    return false
  }

  if (!response.ok) {
    return false
  }

  return true
}


var _db = null
function openStore () {
  return new Promise(function(resolve, reject) {
    if (_db) {
      var store = _db.transaction("version", "readwrite").objectStore("version")
      resolve(store)
      return
    }

    // Open (or create) the database
    var open = indexedDB.open("MyDatabase", 3);

    // Create the schema
    open.onupgradeneeded = function (event) {
      var db = event.target.result // or open.result
      db.createObjectStore("version", {keyPath: 'id'})
    }

    open.onsuccess = function (event) {
      var db = event.target.result // or open.result
      _db = db // save in global
      var store = db.transaction("version", "readwrite").objectStore("version")
      resolve(store)
    }
  })
}

function putVersion(version) {
  openStore().then(function (store) {
    store.put({id: 'version', value: version})
  })
}

function getVersion(version) {
  return openStore().then(function (store) {
    return new Promise(function(resolve, reject) {
      var req = store.get('version')
      req.onsuccess = function(event){
        resolve(event.target.result.value)
      }
      req.onerror = function (event) {
        reject(event)
      }
    })
  })
}

putVersion('hoihoi')

this.addEventListener('fetch', function (event) {
  var request = event.request

  // TODO: 特定のfetchがあれば、キャッシュをクリアするというのを試してみたい

  event.respondWith(
    getVersion().then(function(version) {
      return caches.open(version).then(function(cache) {
        return cache.match(request).then(function (response) {
          if (response) {
            console.log('sw: respond from cache', request.url)
            return response
          }

          if (shouldUseAppHtml(request)) {
            return caches.match('/app.html').then(function (response) {
              if (response) {
                console.log('sw: respond app.html', request.url)
                return response
              }

              console.log('sw: fetch', request.url)
              return fetch(request, {credentials: 'include'})
            })
          }

          console.log('sw: fetch', request.url)
          return fetch(request).then(function(response) {
            if (shouldCache(request, response)) {
              console.log('sw: save cache', request.url)
  //            return caches.open(CACHENAME).then(function(cache) {
              cache.put(request, response.clone());
              return response;
  //            });
            } else {
              return response;
            }
          })
        })
      })
    })
  )
})


      // TODO: ここから下は、gyazo.com/xxx.pngなどのユーザー画像をキャッシュするかどうか
      // あとで書く
/*

      return fetch(event.request).then(function(response) {


        if (shouldCache) {
          console.log('sw: save cache', event.request.url)
          return caches.open(CACHENAME).then(function(cache) {
            cache.put(event.request, response.clone());
            return response;
          });
        } else {
          return response;
        }
      });
*/

